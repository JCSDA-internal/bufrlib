@PACKAGE_INIT@

#@PROJECT_NAME@-config.cmake
#
# Valid Find COMPONENTS:
#  * SHARED - Find shared libraries.
#  * STATIC - Find static libraries.
#
# Output variables set:
#  * @PROJECT_NAME@_VERSION - Version of install package
#  * @PROJECT_NAME@_LIBRARIES  - set to static libs if available, shared libs otherwise
#  * @PROJECT_NAME@_SHARED_LIBRARIES - shared libraries if available
#  * @PROJECT_NAME@_STATIC_LIBRARIES - static libraries if available
#  * @PROJECT_NAME@_BUILD_TYPES - build types provided
#  * @PROJECT_NAME@_MODULES_Fortran_COMPILER_ID - Compiler used to generate Fortran Modules
#  * @PROJECT_NAME@_MODULES_Fortran_COMPILER_VERSION - Compiler version used to generate Fortran Modules
#
# Imported interface targets provided:
#  * @PROJECT_NAME@::@PROJECT_NAME@_static - static library target
#  * @PROJECT_NAME@::@PROJECT_NAME@_shared - shared library target:

#Include targets file.  This will create IMPORTED target @PROJECT_NAME@
include("${CMAKE_CURRENT_LIST_DIR}/@PROJECT_NAME@-targets.cmake")

set(@PROJECT_NAME@_VERSION @PROJECT_VERSION@)

set(@PROJECT_NAME@_SHARED_LIBRARIES)
set(@PROJECT_NAME@_STATIC_LIBRARIES)
set(@PROJECT_NAME@_SHARED_FOUND 0)
set(@PROJECT_NAME@_STATIC_FOUND 0)
if(@BUILD_STATIC_LIBS@)
    set(@PROJECT_NAME@_STATIC_LIBRARIES @PROJECT_NAME@::@PROJECT_NAME@_static)
    set(@PROJECT_NAME@_LIBRARIES @PROJECT_NAME@::@PROJECT_NAME@_static)
    set(@PROJECT_NAME@_STATIC_FOUND 1)
    if(@BUILD_SHARED_LIBS@)
        set(@PROJECT_NAME@_SHARED_LIBRARIES @PROJECT_NAME@::@PROJECT_NAME@_shared)
        set(@PROJECT_NAME@_SHARED_FOUND 1)
    endif()
elseif(@BUILD_SHARED_LIBS@)
    #Only shared libraries are build.  Set @PROJECT_NAME@_LIBRARIES to point to shared target.
    set(@PROJECT_NAME@_SHARED_LIBRARIES @PROJECT_NAME@::@PROJECT_NAME@_shared)
    set(@PROJECT_NAME@_LIBRARIES @PROJECT_NAME@::@PROJECT_NAME@_shared)
    set(@PROJECT_NAME@_SHARED_FOUND 1)
else()
    set(@PROJECT_NAME@_FOUND 0)
    set(@PROJECT_NAME@_NOT_FOUND_MESSAGE "Neither BUILD_SHARED_LIBS nor BUILD_STATIC_LIBS was set.  Unable to find any libraries.")
endif()

#Aliases for NCEPLIBS-bufr naming compatibility point to default targets
set_target_properties(${@PROJECT_NAME@_STATIC_LIBRARIES} ${@PROJECT_NAME@_SHARED_LIBRARIES} PROPERTIES IMPORTED_GLOBAL) #Allow Alias to targets
add_library(@PROJECT_NAME@::@PROJECT_NAME@ ALIAS ${@PROJECT_NAME@_LIBRARIES})
add_library(@PROJECT_NAME@::@PROJECT_NAME@_4_DA ALIAS ${@PROJECT_NAME@_LIBRARIES})

get_target_property(@PROJECT_NAME@_BUILD_TYPES ${@PROJECT_NAME@_LIBRARIES} IMPORTED_CONFIGURATIONS)

#Export Fortran compiler version and check module compatibility
set(@PROJECT_NAME@_MODULES_Fortran_COMPILER_ID @CMAKE_Fortran_COMPILER_ID@)
set(@PROJECT_NAME@_MODULES_Fortran_COMPILER_VERSION @CMAKE_Fortran_COMPILER_VERSION@)
if(NOT @PROJECT_NAME@_MODULES_Fortran_COMPILER_ID STREQUAL CMAKE_Fortran_COMPILER_ID
   OR NOT @PROJECT_NAME@_MODULES_Fortran_COMPILER_VERSION VERSION_EQUAL CMAKE_Fortran_COMPILER_VERSION)
    message(SEND_ERROR "Package @PROJECT_NAME@ provides Fortran modules built with "
            "${@PROJECT_NAME@_MODULES_Fortran_COMPILER_ID}-${@PROJECT_NAME@_MODULES_Fortran_COMPILER_VERSION} "
            "but this build for ${PROJECT_NAME} uses incompatible compiler ${CMAKE_Fortran_COMPILER_ID}-${CMAKE_Fortran_COMPILER_VERSION}")
endif()

check_required_components("@PROJECT_NAME@")

get_target_property(location ${@PROJECT_NAME@_LIBRARIES} LOCATION)
message(STATUS "Found @PROJECT_NAME@: ${location} (found version \"@PROJECT_VERSION@\")")
